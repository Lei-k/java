package k.lei.subway;

import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class Subway {
	
	private List<Station> stations;
	private List<Connection> connections;
	private Map<Station, List<Station>> network;
	
	public Subway(){
		stations = new LinkedList<>();
		connections = new LinkedList<>();
		network = new HashMap<>();
	}
	
	public void addStation(String stationName){
		if(!hasStation(stationName)){
			stations.add(new Station(stationName));
		}
	}
	
	public boolean hasStation(String stationName){
		return stations.contains(new Station(stationName));
	}
	
	public void addConnection(String lineName, String station1Name, String station2Name){
		if(hasStation(station1Name) && hasStation(station2Name)){
			Station station1 = new Station(station1Name);
			Station station2 = new Station(station2Name);
			connections.add(new Connection(lineName, station1, station2));
			connections.add(new Connection(lineName, station2, station1));
			
			addToNetwork(station1, station2);
			addToNetwork(station2, station1);
		}else{
			System.out.println(station1Name);
			System.out.println(station2Name);
			throw new RuntimeException("Invalid connection!");
		}
	}
	
	private void addToNetwork(Station station1, Station station2) {
        if (network.keySet().contains(station1)) {
            List<Station> connectingStations = (List<Station>)network.get(station1);
            if (!connectingStations.contains(station2)) {
                connectingStations.add(station2);
            }
        } else {
            List<Station> connectingStations = new LinkedList<>();
            connectingStations.add(station2);
            network.put(station1, connectingStations);
        }
    }
    
    public List<Connection> getDirections(String startStationName, String endStationName) {
        if (!this.hasStation(startStationName) || !this.hasStation(endStationName))
        {
            throw new RuntimeException("Stations entered do not exist on this subway");
        }
        
        Station start = new Station(startStationName);
        Station end = new Station(endStationName);
        List<Connection> route = new LinkedList<>();
        List<Station> reachableStations = new LinkedList<>();
        Map<Station, Station> previousStations = new HashMap<>();
        List<Station> neighbors = (List<Station>)network.get(start);
        
        for (Iterator<Station> i = neighbors.iterator(); i.hasNext(); ) {
            Station station = (Station) i.next();
            if (station.equals(end)) {
                route.add(getConnection(start, end));
                return route;
            } else {
                reachableStations.add(station);
                previousStations.put(station, start);
            }
        }
        
        List<Station> nextStations = new LinkedList<>();
        nextStations.addAll(neighbors);
        Station currentStation = start;
        
        searchLoop:
        for (int i = 1; i < stations.size(); i++) {
            List<Station> tmpNextStations = new LinkedList<>();
            for (Iterator<Station> j = nextStations.iterator(); j.hasNext(); ) {
                Station station = (Station) j.next();
                reachableStations.add(station);
                currentStation = station;
                List<Station> currentNeighbors = (List<Station>) network.get(currentStation);
                for (Iterator<Station> k = currentNeighbors.iterator(); k.hasNext(); ) {
                    Station neighbor = (Station) k.next();
                    if (neighbor.equals(end)) {
                        reachableStations.add(neighbor);
                        previousStations.put(neighbor, currentStation);
                        break searchLoop;
                    } else if (!reachableStations.contains(neighbor)) {
                        reachableStations.add(neighbor);
                        tmpNextStations.add(neighbor);
                        previousStations.put(neighbor, currentStation);
                    }
                }
            }
            nextStations = tmpNextStations;
        }
        
        //We've found the path now!
        boolean keepLooping = true;
        Station keyStation = end;
        Station station;
        
        while (keepLooping) {
            station = (Station) previousStations.get(keyStation);
            route.add(0, getConnection(station, keyStation));
            if (start.equals(station)) {
                keepLooping = false;
            }
            keyStation = station;
        }
        
        return route;
    }
	
    private Connection getConnection(Station station1, Station station2) {
        for (Iterator<Connection> i = connections.iterator(); i.hasNext(); ) {
            Connection connection = (Connection) i.next();
            Station one = connection.getStation1();
            Station two = connection.getStation2();
            if ((station1.equals(one)) && station2.equals(two)) {
                return connection;
            }
        }
        return null;
    }
        
    
    public boolean hasConnection(String station1Name, String station2Name, String lineName) {
        Station station1 = new Station(station1Name);
        Station station2 = new Station(station2Name);
        for (Iterator<Connection> i = connections.iterator(); i.hasNext(); ) {
            Connection connection = (Connection) i.next();
            if (connection.getLineName().equalsIgnoreCase(lineName)) {
                if ((connection.getStation1().equals(station1)) &&
                    (connection.getStation2().equals(station2)))
                {
                    return true;
                }
            }
        }
        return false;
    }
}
